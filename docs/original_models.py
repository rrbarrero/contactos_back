# Code generated by:
# python -m pwiz -H 172.17.0.2 -p 3306 -u root contactos_original -i -e mysql -P
# Date: May 28, 2020 01:02PM
# Database: contactos_original
# Peewee version: 3.13.3

from peewee import *

database = MySQLDatabase('contactos_original', **{'charset': 'utf8', 'sql_mode': 'PIPES_AS_CONCAT', 'use_unicode': True, 'host': '172.17.0.2', 'port': 3306, 'user': 'root', 'password': 'rage'})

class UnknownField(object):
    def __init__(self, *_, **__): pass

class BaseModel(Model):
    class Meta:
        database = database

class AgendaTipo(BaseModel):
    nombre = CharField()

    class Meta:
        table_name = 'agenda_tipo'

class Colectivo(BaseModel):
    nombre = CharField(null=True, unique=True)

    class Meta:
        table_name = 'colectivo'

class Finalidad(BaseModel):
    nombre = CharField(null=True, unique=True)

    class Meta:
        table_name = 'finalidad'

class Pais(BaseModel):
    nombre = CharField(null=True, unique=True)

    class Meta:
        table_name = 'pais'

class Tratamiento(BaseModel):
    nombre = CharField(null=True, unique=True)

    class Meta:
        table_name = 'tratamiento'

class Persona(BaseModel):
    apellidos = CharField(index=True, null=True)
    nombre = CharField(index=True, null=True)
    tratamiento = ForeignKeyField(column_name='tratamiento', field='id', model=Tratamiento, null=True)

    class Meta:
        table_name = 'persona'

class Provincia(BaseModel):
    nombre = CharField(null=True, unique=True)

    def __str__(self):
        return "<Procincia ID: {} Nombre: {}>".format(self.id, self.nombre)

    class Meta:
        table_name = 'provincia'

class Subcolectivo(BaseModel):
    id_colectivo = IntegerField(index=True)
    nombre = CharField()

    class Meta:
        table_name = 'subcolectivo'

class Usuario(BaseModel):
    apellidos = CharField(null=True)
    escritura = IntegerField(constraints=[SQL("DEFAULT 0")], null=True)
    nombre = CharField(null=True)
    password = CharField(null=True)
    username = CharField(null=True, unique=True)

    class Meta:
        table_name = 'usuario'

class Cargo(BaseModel):
    cargo = CharField(index=True, null=True)
    cargo_finalizado = IntegerField(constraints=[SQL("DEFAULT 0")], null=True)
    ciudad = CharField(null=True)
    cod_postal = CharField(null=True)
    direccion = CharField(null=True)
    empresa = CharField(index=True, null=True)
    fecha_cese = DateTimeField(null=True)
    fecha_creacion = DateTimeField(constraints=[SQL("DEFAULT CURRENT_TIMESTAMP")])
    fecha_modificacion = DateTimeField(null=True)
    id_colectivo = ForeignKeyField(column_name='id_colectivo', field='id', model=Colectivo)
    id_finalidad = ForeignKeyField(column_name='id_finalidad', field='id', model=Finalidad)
    id_pais = ForeignKeyField(column_name='id_pais', field='id', model=Pais)
    id_persona = ForeignKeyField(column_name='id_persona', field='id', model=Persona)
    id_provincia = ForeignKeyField(column_name='id_provincia', field='id', model=Provincia)
    id_subcolectivo = ForeignKeyField(column_name='id_subcolectivo', field='id', model=Subcolectivo)
    id_usuario_creador = ForeignKeyField(column_name='id_usuario_creador', field='id', model=Usuario)
    id_usuario_modificador = ForeignKeyField(backref='usuario_id_usuario_modificador_set', column_name='id_usuario_modificador', field='id', model=Usuario, null=True)
    notas = TextField(null=True)

    class Meta:
        table_name = 'cargo'

class Agenda(BaseModel):
    dato = CharField(null=True)
    id_cargo = ForeignKeyField(column_name='id_cargo', field='id', model=Cargo)
    info = CharField(null=True)
    nombre = CharField(null=True)
    tipo = ForeignKeyField(column_name='tipo', field='id', model=AgendaTipo)

    class Meta:
        table_name = 'agenda'

class Evento(BaseModel):
    nombre = CharField()

    class Meta:
        table_name = 'evento'

class Invitacion(BaseModel):
    comentario = CharField(null=True)
    confirmado = IntegerField(null=True)
    edicion = CharField()
    id_cargo = ForeignKeyField(column_name='id_cargo', field='id', model=Cargo)
    id_evento = ForeignKeyField(column_name='id_evento', field='id', model=Evento)

    class Meta:
        table_name = 'invitacion'

class LogEventos(BaseModel):
    comentario = CharField(null=True)
    nombre = CharField()
    prioridad = IntegerField(constraints=[SQL("DEFAULT 1")])

    class Meta:
        table_name = 'log_eventos'

class Log(BaseModel):
    autor = IntegerField(null=True)
    evento = ForeignKeyField(column_name='evento_id', constraints=[SQL("DEFAULT 1")], field='id', model=LogEventos, null=True)
    fecha = DateTimeField(constraints=[SQL("DEFAULT CURRENT_TIMESTAMP")])
    ip = CharField(null=True)
    nota = CharField(null=True)

    class Meta:
        table_name = 'log'

class MC2312Tmp(BaseModel):
    id_cargo = IntegerField(index=True)
    id_marca = IntegerField(index=True)
    id_persona = IntegerField(index=True)

    class Meta:
        table_name = 'm_c_2312_tmp'

class MC3012Tmp(BaseModel):
    id_cargo = IntegerField(index=True)
    id_marca = IntegerField(index=True)
    id_persona = IntegerField(index=True)

    class Meta:
        table_name = 'm_c_3012_tmp'

class Marca(BaseModel):
    fecha = DateTimeField(constraints=[SQL("DEFAULT CURRENT_TIMESTAMP")])
    id_usuario = ForeignKeyField(column_name='id_usuario', field='id', model=Usuario)
    nombre = CharField()

    class Meta:
        table_name = 'marca'

class MarcaContacto(BaseModel):
    id_cargo = ForeignKeyField(column_name='id_cargo', field='id', model=Cargo)
    id_marca = ForeignKeyField(column_name='id_marca', field='id', model=Marca)
    id_persona = ForeignKeyField(column_name='id_persona', field='id', model=Persona)

    class Meta:
        table_name = 'marca_contacto'

